__constant sampler_t reflect_sampler = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_MIRRORED_REPEAT | CLK_FILTER_NEAREST;
__constant sampler_t clamp_sampler = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP_TO_EDGE | CLK_FILTER_NEAREST;


// gaussian / differential of gaussian / laplasjan
// zapis do ounktów do jakiegos bufora i zrobienie na nim dylatacji zeby punkty były większe

__kernel void feature_detection(
    __read_only image2d_t src,
    __write_only image2d_t dest) {
        int2 coord = (int2)(get_global_id(0), get_global_id(1));
        const float4 in = convert_float4(read_imageui(src, clamp_sampler, coord));
        float gray = dot(in, (float4)(0.2126f, 0.7152f, 0.0722f, 0)); 
        if((coord.x == 1000) && (coord.y == 1000)) {
            printf("1");
        }

        float4 s = (float4)(0);
        int i = 0;
        // float filterWeights2[5*5] = 
        //                     {
        //                          0.0039062f, 0.0156250f, 0.0234375f, 0.0156250f, 0.0039062f,
        //                          0.0156250f, 0.0625000f, 0.0937500f, 0.0625000f, 0.0156250f,
        //                          0.0234375f, 0.0937500f, 0.1406250f, 0.0937500f, 0.0234375f,
        //                          0.0156250f, 0.0625000f, 0.0937500f, 0.0625000f, 0.0156250f,
        //                          0.0039062f, 0.0156250f, 0.0234375f, 0.0156250f, 0.0039062f
        //                     };
        float filterWeights2[9] = {
                                    0.0751136079541115, 0.12384140315297394, 0.0751136079541115, 
                                    0.12384140315297394, 0.20417995557165805, 0.12384140315297394, 
                                    0.0751136079541115, 0.12384140315297394, 0.0751136079541115, 
                                };

// float filterWeights2[9*9] = 
// {
//     1.234098e-04, 3.726653e-04, 9.118820e-04, 1.831564e-03, 2.865047e-03, 3.726653e-04, 9.118820e-04, 3.726653e-04, 1.234098e-04,
//     3.726653e-04, 1.125351e-03, 2.753644e-03, 5.530844e-03, 8.636116e-03, 1.125351e-03, 2.753644e-03, 1.125351e-03, 3.726653e-04,
//     9.118820e-04, 2.753644e-03, 6.737947e-03, 1.353353e-02, 2.113575e-02, 2.753644e-03, 6.737947e-03, 2.753644e-03, 9.118820e-04,
//     1.831564e-03, 5.530844e-03, 1.353353e-02, 2.718281e-02, 4.247802e-02, 5.530844e-03, 1.353353e-02, 5.530844e-03, 1.831564e-03,
//     2.865047e-03, 8.636116e-03, 2.113575e-02, 4.247802e-02, 6.635020e-02, 8.636116e-03, 2.113575e-02, 8.636116e-03, 2.865047e-03,
//     1.831564e-03, 5.530844e-03, 1.353353e-02, 2.718281e-02, 4.247802e-02, 5.530844e-03, 1.353353e-02, 5.530844e-03, 1.831564e-03,
//     9.118820e-04, 2.753644e-03, 6.737947e-03, 1.353353e-02, 2.113575e-02, 2.753644e-03, 6.737947e-03, 2.753644e-03, 9.118820e-04,
//     3.726653e-04, 1.125351e-03, 2.753644e-03, 5.530844e-03, 8.636116e-03, 1.125351e-03, 2.753644e-03, 1.125351e-03, 3.726653e-04,
//     1.234098e-04, 3.726653e-04, 9.118820e-04, 1.831564e-03, 2.865047e-03, 3.726653e-04, 9.118820e-04, 3.726653e-04, 1.234098e-04
// };

// float filterWeights[11*11] = 
// {
//     0.00000107f, 0.00000767f, 0.00003531f, 0.00011473f, 0.00027804f, 0.00048675f, 0.00027804f, 0.00011473f, 0.00003531f, 0.00000767f, 0.00000107f,
//     0.00000767f, 0.00005503f, 0.00025341f, 0.00082272f, 0.00199444f, 0.00348812f, 0.00199444f, 0.00082272f, 0.00025341f, 0.00005503f, 0.00000767f,
//     0.00003531f, 0.00025341f, 0.00116634f, 0.00378637f, 0.00917909f, 0.01607127f, 0.00917909f, 0.00378637f, 0.00116634f, 0.00025341f, 0.00003531f,
//     0.00011473f, 0.00082272f, 0.00378637f, 0.01229324f, 0.02980402f, 0.05217169f, 0.02980402f, 0.01229324f, 0.00378637f, 0.00082272f, 0.00011473f,
//     0.00027804f, 0.00199444f, 0.00917909f, 0.02980402f, 0.07228394f, 0.12660955f, 0.07228394f, 0.02980402f, 0.00917909f, 0.00199444f, 0.00027804f,
//     0.00048675f, 0.00348812f, 0.01607127f, 0.05217169f, 0.12660955f, 0.22183000f, 0.12660955f, 0.05217169f, 0.01607127f, 0.00348812f, 0.00048675f,
//     0.00027804f, 0.00199444f, 0.00917909f, 0.02980402f, 0.07228394f, 0.12660955f, 0.07228394f, 0.02980402f, 0.00917909f, 0.00199444f, 0.00027804f,
//     0.00011473f, 0.00082272f, 0.00378637f, 0.01229324f, 0.02980402f, 0.05217169f, 0.02980402f, 0.01229324f, 0.00378637f, 0.00082272f, 0.00011473f,
//     0.00003531f, 0.00025341f, 0.00116634f, 0.00378637f, 0.00917909f, 0.01607127f, 0.00917909f, 0.00378637f, 0.00116634f, 0.00025341f, 0.00003531f,
//     0.00000767f, 0.00005503f, 0.00025341f, 0.00082272f, 0.00199444f, 0.00348812f, 0.00199444f, 0.00082272f, 0.00025341f, 0.00005503f, 0.00000767f,
//     0.00000107f, 0.00000767f, 0.00003531f, 0.00011473f, 0.00027804f, 0.00048675f, 0.00027804f, 0.00011473f, 0.00003531f, 0.00000767f, 0.00000107f
// };
// float filterWeights[17*17] = {
// 2.552544282839139e-29, 4.6151083281504977e-26, 3.069700690062657e-23, 7.511309933242421e-21, 6.761465724995969e-19, 2.2390899338644868e-17, 2.727769959677605e-16, 1.2225016814683626e-15, 2.015564525703562e-15, 1.2225016814683626e-15, 2.727769959677605e-16, 
// 2.2390899338644868e-17, 6.761465724995969e-19, 7.511309933242421e-21, 3.069700690062657e-23, 4.6151083281504977e-26, 2.552544282839139e-29, 4.6151083281504977e-26, 
// 8.344311604605512e-23, 5.550149047318329e-20, 1.3580766947427442e-17, 1.2225016814683626e-15, 4.048369570208614e-14, 4.931923783976215e-13, 2.2103348918386555e-12, 3.6442261515450586e-12, 2.2103348918386555e-12, 
// 4.931923783976215e-13, 4.048369570208614e-14, 1.2225016814683626e-15, 1.3580766947427442e-17, 5.550149047318329e-20, 8.344311604605512e-23, 4.6151083281504977e-26, 3.069700690062657e-23, 
// 5.550149047318329e-20, 3.691635200972922e-17, 9.033133505406781e-15, 8.131367648113449e-13, 2.6927391470956588e-11, 3.2804278397242686e-10, 1.4701857595324961e-09, 2.4239265336216506e-09, 
// 1.4701857595324961e-09, 3.2804278397242686e-10, 2.6927391470956588e-11, 8.131367648113449e-13, 9.033133505406781e-15, 3.691635200972922e-17, 5.550149047318329e-20, 3.069700690062657e-23, 
// 7.511309933242421e-21, 1.3580766947427442e-17, 9.033133505406781e-15, 2.2103348918386555e-12, 1.9896800617676494e-10, 6.5889154498634555e-09, 8.026942267554734e-08, 3.59742594287347e-07, 
// 5.931152671783954e-07, 3.59742594287347e-07, 8.026942267554734e-08, 6.5889154498634555e-09, 1.9896800617676494e-10, 2.2103348918386555e-12, 9.033133505406781e-15, 1.3580766947427442e-17, 
// 7.511309933242421e-21, 6.761465724995969e-19, 1.2225016814683626e-15, 8.131367648113449e-13, 1.9896800617676494e-10, 1.7910529136616885e-08, 5.931152671783954e-07, 7.225623160401829e-06, 
// 3.238299634435446e-05, 5.3390534881941685e-05, 3.238299634435446e-05, 7.225623160401829e-06, 5.931152671783954e-07, 1.7910529136616885e-08, 1.9896800617676494e-10, 8.131367648113449e-13, 
// 1.2225016814683626e-15, 6.761465724995969e-19, 2.2390899338644868e-17, 4.048369570208614e-14, 2.6927391470956588e-11, 6.5889154498634555e-09, 5.931152671783954e-07, 1.964128013621311e-05, 
// 0.0002392797766399013, 0.001072377559719979, 0.0017680516929318266, 0.001072377559719979, 0.0002392797766399013, 1.964128013621311e-05, 5.931152671783954e-07, 6.5889154498634555e-09, 2.6927391470956588e-11, 
// 4.048369570208614e-14, 2.2390899338644868e-17, 2.727769959677605e-16, 4.931923783976215e-13, 3.2804278397242686e-10, 8.026942267554734e-08, 7.225623160401829e-06, 0.0002392797766399013, 0.0029150244338340733, 0.013064233144882573, 
// 0.021539279071353525, 0.013064233144882573, 0.0029150244338340733, 0.0002392797766399013, 7.225623160401829e-06, 8.026942267554734e-08, 3.2804278397242686e-10, 
// 4.931923783976215e-13, 2.727769959677605e-16, 1.2225016814683626e-15, 2.2103348918386555e-12, 1.4701857595324961e-09, 3.59742594287347e-07, 3.238299634435446e-05, 0.001072377559719979, 
// 0.013064233144882573, 0.05854983089776852, 0.09653235159704653, 0.05854983089776852, 0.013064233144882573, 0.001072377559719979, 3.238299634435446e-05, 
// 3.59742594287347e-07, 1.4701857595324961e-09, 2.2103348918386555e-12, 1.2225016814683626e-15, 2.015564525703562e-15, 3.6442261515450586e-12, 2.4239265336216506e-09, 
// 5.931152671783954e-07, 5.3390534881941685e-05, 0.0017680516929318266, 0.021539279071353525, 0.09653235159704653, 0.15915494138875408, 0.09653235159704653, 
// 0.021539279071353525, 0.0017680516929318266, 5.3390534881941685e-05, 5.931152671783954e-07, 2.4239265336216506e-09, 3.6442261515450586e-12, 2.015564525703562e-15, 1.2225016814683626e-15, 
// 2.2103348918386555e-12, 1.4701857595324961e-09, 3.59742594287347e-07, 3.238299634435446e-05, 0.001072377559719979, 0.013064233144882573, 0.05854983089776852, 
// 0.09653235159704653, 0.05854983089776852, 0.013064233144882573, 0.001072377559719979, 3.238299634435446e-05, 3.59742594287347e-07, 1.4701857595324961e-09, 
// 2.2103348918386555e-12, 1.2225016814683626e-15, 2.727769959677605e-16, 4.931923783976215e-13, 3.2804278397242686e-10, 8.026942267554734e-08, 7.225623160401829e-06, 0.0002392797766399013, 
// 0.0029150244338340733, 0.013064233144882573, 0.021539279071353525, 0.013064233144882573, 0.0029150244338340733, 0.0002392797766399013, 7.225623160401829e-06, 
// 8.026942267554734e-08, 3.2804278397242686e-10, 4.931923783976215e-13, 2.727769959677605e-16, 2.2390899338644868e-17, 4.048369570208614e-14, 2.6927391470956588e-11, 6.5889154498634555e-09, 5.931152671783954e-07, 
// 1.964128013621311e-05, 0.0002392797766399013, 0.001072377559719979, 0.0017680516929318266, 0.001072377559719979, 0.0002392797766399013, 1.964128013621311e-05, 5.931152671783954e-07, 6.5889154498634555e-09, 2.6927391470956588e-11, 4.048369570208614e-14, 2.2390899338644868e-17, 6.761465724995969e-19, 1.2225016814683626e-15, 
// 8.131367648113449e-13, 1.9896800617676494e-10, 1.7910529136616885e-08, 5.931152671783954e-07, 7.225623160401829e-06, 3.238299634435446e-05, 5.3390534881941685e-05, 3.238299634435446e-05, 
// 7.225623160401829e-06, 5.931152671783954e-07, 1.7910529136616885e-08, 1.9896800617676494e-10, 8.131367648113449e-13, 1.2225016814683626e-15, 6.761465724995969e-19, 7.511309933242421e-21, 
// 1.3580766947427442e-17, 9.033133505406781e-15, 2.2103348918386555e-12, 1.9896800617676494e-10, 6.5889154498634555e-09, 8.026942267554734e-08, 3.59742594287347e-07, 5.931152671783954e-07, 3.59742594287347e-07, 8.026942267554734e-08, 6.5889154498634555e-09, 1.9896800617676494e-10, 
// 2.2103348918386555e-12, 9.033133505406781e-15, 1.3580766947427442e-17, 7.511309933242421e-21, 3.069700690062657e-23, 5.550149047318329e-20, 3.691635200972922e-17, 9.033133505406781e-15, 8.131367648113449e-13, 2.6927391470956588e-11, 3.2804278397242686e-10, 1.4701857595324961e-09, 2.4239265336216506e-09, 1.4701857595324961e-09, 
// 3.2804278397242686e-10, 2.6927391470956588e-11, 8.131367648113449e-13, 9.033133505406781e-15, 3.691635200972922e-17, 5.550149047318329e-20, 3.069700690062657e-23, 4.6151083281504977e-26, 
// 8.344311604605512e-23, 5.550149047318329e-20, 1.3580766947427442e-17, 1.2225016814683626e-15, 4.048369570208614e-14, 4.931923783976215e-13, 2.2103348918386555e-12, 3.6442261515450586e-12, 
// 2.2103348918386555e-12, 4.931923783976215e-13, 4.048369570208614e-14, 1.2225016814683626e-15, 1.3580766947427442e-17, 5.550149047318329e-20, 8.344311604605512e-23, 4.6151083281504977e-26, 2.552544282839139e-29, 
// 4.6151083281504977e-26, 3.069700690062657e-23, 7.511309933242421e-21, 6.761465724995969e-19, 2.2390899338644868e-17, 2.727769959677605e-16, 1.2225016814683626e-15, 2.015564525703562e-15, 1.2225016814683626e-15, 
// 2.727769959677605e-16, 2.2390899338644868e-17, 6.761465724995969e-19, 7.511309933242421e-21, 3.069700690062657e-23, 4.6151083281504977e-26, 2.552544282839139e-29};
float filterWeights[21*21] = {
5.920684739253084e-45, 7.909873076096903e-41, 3.887519772512212e-37, 7.0288006357386665e-34, 4.675147933198465e-31, 1.1439709813954087e-28, 
1.0297698603625729e-26, 3.410129433934608e-25, 4.154388123412552e-24, 1.8618675846640297e-23, 3.0697006900626574e-23, 1.8618675846640297e-23, 
4.154388123412552e-24, 3.410129433934608e-25, 1.0297698603625729e-26, 1.1439709813954087e-28, 4.675147933198465e-31, 7.0288006357386665e-34, 
3.887519772512212e-37, 7.909873076096903e-41, 5.920684739253084e-45, 7.909873076096903e-41, 1.0567374355395188e-36, 5.193620220567242e-33, 
9.390285643362227e-30, 6.245869927578978e-27, 1.5283139812502867e-24, 1.3757444031863027e-22, 4.5558397691155836e-21, 5.55014904731833e-20, 
2.4874042324113785e-19, 4.101036266806165e-19, 2.4874042324113785e-19, 5.55014904731833e-20, 4.5558397691155836e-21, 1.3757444031863027e-22, 
1.5283139812502867e-24, 6.245869927578978e-27, 9.390285643362227e-30, 5.193620220567242e-33, 1.0567374355395188e-36, 7.909873076096903e-41, 
3.887519772512212e-37, 5.193620220567242e-33, 2.5525442828391397e-29, 4.615108328150499e-26, 3.0697006900626574e-23, 7.511309933242423e-21, 
6.76146572499597e-19, 2.239089933864487e-17, 2.7277699596776057e-16, 1.2225016814683628e-15, 2.0155645257035625e-15, 1.2225016814683628e-15, 2.7277699596776057e-16, 
2.239089933864487e-17, 6.76146572499597e-19, 7.511309933242423e-21, 3.0697006900626574e-23, 4.615108328150499e-26, 2.5525442828391397e-29, 
5.193620220567242e-33, 3.887519772512212e-37, 7.0288006357386665e-34, 9.390285643362227e-30, 4.615108328150499e-26, 8.344311604605513e-23, 
5.55014904731833e-20, 1.3580766947427444e-17, 1.2225016814683628e-15, 4.048369570208615e-14, 4.931923783976215e-13, 2.210334891838656e-12, 3.644226151545059e-12, 
2.210334891838656e-12, 4.931923783976215e-13, 4.048369570208615e-14, 1.2225016814683628e-15, 1.3580766947427444e-17, 5.55014904731833e-20, 
8.344311604605513e-23, 4.615108328150499e-26, 9.390285643362227e-30, 7.0288006357386665e-34, 4.675147933198465e-31, 6.245869927578978e-27, 3.0697006900626574e-23, 
5.55014904731833e-20, 3.691635200972923e-17, 9.033133505406783e-15, 8.13136764811345e-13, 2.692739147095659e-11, 3.280427839724269e-10, 1.4701857595324963e-09, 
2.4239265336216506e-09, 1.4701857595324963e-09, 3.280427839724269e-10, 2.692739147095659e-11, 8.13136764811345e-13, 9.033133505406783e-15, 3.691635200972923e-17, 
5.55014904731833e-20, 3.0697006900626574e-23, 6.245869927578978e-27, 4.675147933198465e-31, 1.1439709813954087e-28, 1.5283139812502867e-24, 7.511309933242423e-21, 
1.3580766947427444e-17, 9.033133505406783e-15, 2.210334891838656e-12, 1.9896800617676497e-10, 6.588915449863456e-09, 8.026942267554735e-08, 3.5974259428734704e-07, 
5.931152671783955e-07, 3.5974259428734704e-07, 8.026942267554735e-08, 6.588915449863456e-09, 1.9896800617676497e-10, 2.210334891838656e-12, 9.033133505406783e-15,1.3580766947427444e-17, 
7.511309933242423e-21,1.5283139812502867e-24, 1.1439709813954087e-28, 1.0297698603625729e-26, 1.3757444031863027e-22, 6.76146572499597e-19, 1.2225016814683628e-15, 8.13136764811345e-13, 
1.9896800617676497e-10, 1.7910529136616888e-08, 5.931152671783955e-07, 7.22562316040183e-06, 3.238299634435447e-05, 5.339053488194169e-05, 3.238299634435447e-05, 7.22562316040183e-06, 
5.931152671783955e-07, 1.7910529136616888e-08, 1.9896800617676497e-10, 8.13136764811345e-13, 1.2225016814683628e-15, 6.76146572499597e-19, 1.3757444031863027e-22, 1.0297698603625729e-26, 
3.410129433934608e-25, 4.5558397691155836e-21, 2.239089933864487e-17, 4.048369570208615e-14, 2.692739147095659e-11, 6.588915449863456e-09, 5.931152671783955e-07, 1.9641280136213113e-05, 0.00023927977663990135, 0.0010723775597199791, 0.0017680516929318268, 0.0010723775597199791, 0.00023927977663990135, 1.9641280136213113e-05, 5.931152671783955e-07, 6.588915449863456e-09, 
2.692739147095659e-11, 4.048369570208615e-14, 2.239089933864487e-17, 4.5558397691155836e-21, 3.410129433934608e-25, 4.154388123412552e-24, 5.55014904731833e-20, 2.7277699596776057e-16, 4.931923783976215e-13, 3.280427839724269e-10, 8.026942267554735e-08, 7.22562316040183e-06, 0.00023927977663990135, 0.0029150244338340737, 0.013064233144882576, 0.021539279071353525, 
0.013064233144882576, 0.0029150244338340737, 0.00023927977663990135, 7.22562316040183e-06, 8.026942267554735e-08, 3.280427839724269e-10, 4.931923783976215e-13, 2.7277699596776057e-16, 
5.55014904731833e-20, 4.154388123412552e-24, 1.8618675846640297e-23, 2.4874042324113785e-19, 1.2225016814683628e-15, 2.210334891838656e-12, 1.4701857595324963e-09, 3.5974259428734704e-07, 
3.238299634435447e-05, 0.0010723775597199791, 0.013064233144882576, 0.05854983089776853, 0.09653235159704654, 0.05854983089776853, 0.013064233144882576, 0.0010723775597199791, 3.238299634435447e-05,3.5974259428734704e-07, 1.4701857595324963e-09, 2.210334891838656e-12, 1.2225016814683628e-15, 2.4874042324113785e-19, 1.8618675846640297e-23, 
3.0697006900626574e-23, 4.101036266806165e-19, 2.0155645257035625e-15, 3.644226151545059e-12, 2.4239265336216506e-09, 5.931152671783955e-07, 5.339053488194169e-05, 0.0017680516929318268, 
0.021539279071353525, 0.09653235159704654, 0.1591549413887541, 0.09653235159704654, 0.021539279071353525, 0.0017680516929318268, 5.339053488194169e-05, 5.931152671783955e-07, 
2.4239265336216506e-09, 3.644226151545059e-12, 2.0155645257035625e-15, 4.101036266806165e-19, 3.0697006900626574e-23, 1.8618675846640297e-23, 2.4874042324113785e-19, 1.2225016814683628e-15, 
2.210334891838656e-12, 1.4701857595324963e-09, 3.5974259428734704e-07, 3.238299634435447e-05, 0.0010723775597199791, 0.013064233144882576, 0.05854983089776853, 0.09653235159704654, 
0.05854983089776853, 0.013064233144882576, 0.0010723775597199791, 3.238299634435447e-05, 3.5974259428734704e-07, 1.4701857595324963e-09, 2.210334891838656e-12, 1.2225016814683628e-15, 
2.4874042324113785e-19, 1.8618675846640297e-23, 4.154388123412552e-24, 5.55014904731833e-20, 2.7277699596776057e-16, 4.931923783976215e-13, 3.280427839724269e-10, 8.026942267554735e-08, 
7.22562316040183e-06, 0.00023927977663990135, 0.0029150244338340737, 0.013064233144882576, 0.021539279071353525, 0.013064233144882576, 0.0029150244338340737, 0.00023927977663990135, 
7.22562316040183e-06, 8.026942267554735e-08, 3.280427839724269e-10, 4.931923783976215e-13, 2.7277699596776057e-16, 5.55014904731833e-20, 4.154388123412552e-24, 3.410129433934608e-25, 
4.5558397691155836e-21, 2.239089933864487e-17, 4.048369570208615e-14, 2.692739147095659e-11, 6.588915449863456e-09, 5.931152671783955e-07, 1.9641280136213113e-05, 0.00023927977663990135, 
0.0010723775597199791, 0.0017680516929318268, 0.0010723775597199791, 0.00023927977663990135, 1.9641280136213113e-05, 5.931152671783955e-07, 6.588915449863456e-09, 2.692739147095659e-11, 4.048369570208615e-14, 2.239089933864487e-17, 4.5558397691155836e-21, 3.410129433934608e-25, 1.0297698603625729e-26, 1.3757444031863027e-22, 6.76146572499597e-19, 1.2225016814683628e-15, 
8.13136764811345e-13, 1.9896800617676497e-10, 1.7910529136616888e-08, 5.931152671783955e-07, 7.22562316040183e-06, 3.238299634435447e-05, 5.339053488194169e-05, 3.238299634435447e-05, 7.22562316040183e-06, 5.931152671783955e-07, 1.7910529136616888e-08, 1.9896800617676497e-10, 8.13136764811345e-13, 1.2225016814683628e-15, 6.76146572499597e-19, 1.3757444031863027e-22, 
1.0297698603625729e-26, 1.1439709813954087e-28, 1.5283139812502867e-24, 7.511309933242423e-21, 1.3580766947427444e-17, 9.033133505406783e-15, 2.210334891838656e-12, 1.9896800617676497e-10, 
6.588915449863456e-09, 8.026942267554735e-08, 3.5974259428734704e-07, 5.931152671783955e-07, 3.5974259428734704e-07, 8.026942267554735e-08, 6.588915449863456e-09, 1.9896800617676497e-10, 
2.210334891838656e-12, 9.033133505406783e-15, 1.3580766947427444e-17, 7.511309933242423e-21, 1.5283139812502867e-24, 1.1439709813954087e-28, 4.675147933198465e-31, 6.245869927578978e-27, 
3.0697006900626574e-23, 5.55014904731833e-20, 3.691635200972923e-17, 9.033133505406783e-15, 8.13136764811345e-13, 2.692739147095659e-11, 3.280427839724269e-10, 1.4701857595324963e-09, 
2.4239265336216506e-09, 1.4701857595324963e-09, 3.280427839724269e-10, 2.692739147095659e-11, 8.13136764811345e-13, 9.033133505406783e-15, 3.691635200972923e-17, 5.55014904731833e-20, 3.0697006900626574e-23, 
6.245869927578978e-27, 4.675147933198465e-31, 7.0288006357386665e-34, 9.390285643362227e-30, 4.615108328150499e-26, 8.344311604605513e-23, 5.55014904731833e-20, 1.3580766947427444e-17, 1.2225016814683628e-15, 
4.048369570208615e-14, 4.931923783976215e-13, 2.210334891838656e-12, 3.644226151545059e-12, 2.210334891838656e-12, 4.931923783976215e-13, 4.048369570208615e-14, 1.2225016814683628e-15, 1.3580766947427444e-17, 
5.55014904731833e-20, 8.344311604605513e-23, 4.615108328150499e-26, 9.390285643362227e-30, 7.0288006357386665e-34, 3.887519772512212e-37, 5.193620220567242e-33, 2.5525442828391397e-29, 
4.615108328150499e-26, 3.0697006900626574e-23, 7.511309933242423e-21, 6.76146572499597e-19, 2.239089933864487e-17, 2.7277699596776057e-16, 1.2225016814683628e-15, 2.0155645257035625e-15, 
1.2225016814683628e-15, 2.7277699596776057e-16, 2.239089933864487e-17, 6.76146572499597e-19, 7.511309933242423e-21, 3.0697006900626574e-23, 4.615108328150499e-26, 2.5525442828391397e-29, 
5.193620220567242e-33, 3.887519772512212e-37, 7.909873076096903e-41, 1.0567374355395188e-36, 5.193620220567242e-33, 9.390285643362227e-30, 6.245869927578978e-27, 1.5283139812502867e-24, 
1.3757444031863027e-22, 4.5558397691155836e-21,5.55014904731833e-20, 2.4874042324113785e-19, 4.101036266806165e-19, 2.4874042324113785e-19, 5.55014904731833e-20, 4.5558397691155836e-21, 
1.3757444031863027e-22,1.5283139812502867e-24, 6.245869927578978e-27, 9.390285643362227e-30, 5.193620220567242e-33, 1.0567374355395188e-36, 7.909873076096903e-41, 5.920684739253084e-45, 
7.909873076096903e-41, 3.887519772512212e-37, 7.0288006357386665e-34, 4.675147933198465e-31, 1.1439709813954087e-28, 1.0297698603625729e-26, 3.410129433934608e-25, 4.154388123412552e-24, 
1.8618675846640297e-23, 3.0697006900626574e-23, 1.8618675846640297e-23, 4.154388123412552e-24, 3.410129433934608e-25, 1.0297698603625729e-26, 1.1439709813954087e-28, 4.675147933198465e-31, 
7.0288006357386665e-34, 3.887519772512212e-37, 7.909873076096903e-41, 5.920684739253084e-45
};
// float filterWeights[13*13] = {
//     1.494e-05f, 3.565e-05f, 7.250e-05f, 1.321e-04f, 2.080e-04f, 2.859e-04f, 3.401e-04f, 3.401e-04f, 2.859e-04f, 2.080e-04f, 1.321e-04f, 7.250e-05f, 3.565e-05f,
//     3.565e-05f, 8.506e-05f, 1.729e-04f, 3.154e-04f, 4.968e-04f, 6.832e-04f, 8.128e-04f, 8.128e-04f, 6.832e-04f, 4.968e-04f, 3.154e-04f, 1.729e-04f, 8.506e-05f,
//     7.250e-05f, 1.729e-04f, 3.519e-04f, 6.419e-04f, 1.011e-03f, 1.389e-03f, 1.653e-03f, 1.653e-03f, 1.389e-03f, 1.011e-03f, 6.419e-04f, 3.519e-04f, 1.729e-04f,
//     1.321e-04f, 3.154e-04f, 6.419e-04f, 1.171e-03f, 1.845e-03f, 2.537e-03f, 3.019e-03f, 3.019e-03f, 2.537e-03f, 1.845e-03f, 1.171e-03f, 6.419e-04f, 3.154e-04f,
//     2.080e-04f, 4.968e-04f, 1.011e-03f, 1.845e-03f, 2.907e-03f, 3.996e-03f, 4.756e-03f, 4.756e-03f, 3.996e-03f, 2.907e-03f, 1.845e-03f, 1.011e-03f, 4.968e-04f,
//     2.859e-04f, 6.832e-04f, 1.389e-03f, 2.537e-03f, 3.996e-03f, 5.492e-03f, 6.548e-03f, 6.548e-03f, 5.492e-03f, 3.996e-03f, 2.537e-03f, 1.389e-03f, 6.832e-04f,
//     3.401e-04f, 8.128e-04f, 1.653e-03f, 3.019e-03f, 4.756e-03f, 6.548e-03f, 7.805e-03f, 7.805e-03f, 6.548e-03f, 4.756e-03f, 3.019e-03f, 1.653e-03f, 8.128e-04f,
//     3.401e-04f, 8.128e-04f, 1.653e-03f, 3.019e-03f, 4.756e-03f, 6.548e-03f, 7.805e-03f, 7.805e-03f, 6.548e-03f, 4.756e-03f, 3.019e-03f, 1.653e-03f, 8.128e-04f,
//     2.859e-04f, 6.832e-04f, 1.389e-03f, 2.537e-03f, 3.996e-03f, 5.492e-03f, 6.548e-03f, 6.548e-03f, 5.492e-03f, 3.996e-03f, 2.537e-03f, 1.389e-03f, 6.832e-04f,
//     2.080e-04f, 4.968e-04f, 1.011e-03f, 1.845e-03f, 2.907e-03f, 3.996e-03f, 4.756e-03f, 4.756e-03f, 3.996e-03f, 2.907e-03f, 1.845e-03f, 1.011e-03f, 4.968e-04f,
//     1.321e-04f, 3.154e-04f, 6.419e-04f, 1.171e-03f, 1.845e-03f, 2.537e-03f, 3.019e-03f, 3.019e-03f, 2.537e-03f, 1.845e-03f, 1.171e-03f, 6.419e-04f, 3.154e-04f,
//     7.250e-05f, 1.729e-04f, 3.519e-04f, 6.419e-04f, 1.011e-03f, 1.389e-03f, 1.653e-03f, 1.653e-03f, 1.389e-03f, 1.011e-03f, 6.419e-04f, 3.519e-04f, 1.729e-04f,
//     3.565e-05f, 8.506e-05f, 1.729e-04f, 3.154e-04f, 4.968e-04f, 6.832e-04f, 8.128e-04f, 8.128e-04f, 6.832e-04f, 4.968e-04f, 3.154e-04f, 1.729e-04f, 8.506e-05f
// };




        int half_smoothing = 10;
        for (int y = -half_smoothing; y <= half_smoothing; ++y) {
            for (int x = -half_smoothing; x <= half_smoothing; ++x) {
                float4 cur_pix = convert_float4(read_imageui(src, clamp_sampler, coord + (int2)(x, y)));
                float4 gray_cur_pix = dot(cur_pix, (float4)(0.2126f, 0.7152f, 0.0722f, 0));
                // if (gray_cur_pix.x > 10) printf("%f", gray_cur_pix.x);
                s += filterWeights[i] * gray_cur_pix;
                ++i;
            }
        }
        float4 s2 = (float4)(0);
        int i1 = 0;
        int half_smoothing2 = 1;
        for (int y = -half_smoothing2; y <= half_smoothing2; ++y) {
            for (int x = -half_smoothing2; x <= half_smoothing2; ++x) {
                float4 cur_pix = convert_float4(read_imageui(src, clamp_sampler, coord + (int2)(x, y)));
                float4 gray_cur_pix = dot(cur_pix, (float4)(0.2126f, 0.7152f, 0.0722f, 0));
                // if (gray_cur_pix.x > 10) printf("%f", gray_cur_pix.x);
                s2 += filterWeights2[i1] * gray_cur_pix;
                ++i1;
            }
        }
        s = (s - s2) * 255;
        if (s.x < 0) s = (float4)(0);
        // s -= s2; 
        // printf("%f ", s.x);
        // if (s.x > 2) printf("%f ", s.x);
        write_imagef(dest, coord, s);
}


__kernel void feature_detection2 (
    __read_only image2d_t src,
    __write_only image2d_t dest) {
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    float4 s = (float4)(0.0f);
    const float4 in = convert_float4(read_imagef(src, clamp_sampler, coord));
    if((coord.x == 1000) && (coord.y==1000)) {printf("2");}
    float4 Gx = (float4)(0);
    float4 Gy = (float4)(0);
    // printf("%f", in.x);
    // Define the Sobel 7x7 kernel
    const float sobel_x[7][7] = {
        { 3,  2,  1,  0, -1, -2, -3},
        { 3,  2,  1,  0, -1, -2, -3},
        { 4,  3,  2,  0, -2, -3, -4},
        { 5,  3,  1,  0, -1, -3, -5},
        { 4,  3,  2,  0, -2, -3, -4},
        { 3,  2,  1,  0, -1, -2, -3},
        { 3,  2,  1,  0, -1, -2, -3}
    };

    const float sobel_y[7][7] = {
        { 3,  3,  4,  5,  4,  3,  3},
        { 2,  2,  3,  3,  3,  2,  2},
        { 1,  1,  2,  1,  2,  1,  1},
        { 0,  0,  0,  0,  0,  0,  0},
        {-1, -1, -2, -1, -2, -1, -1},
        {-2, -2, -3, -3, -3, -2, -2},
        {-3, -3, -4, -5, -4, -3, -3}
    };

    // Iterate over the 7x7 region
    for (int i = -3; i <= 3; i++) {
        for (int j = -3; j <= 3; j++) {
            float4 pixel = convert_float4(read_imagef(src, clamp_sampler, coord + (int2)(j, i)));
            // pixel = dot(pixel, (float4)(0.2126f, 0.7152f, 0.0722f, 0)); 
             // Convert to grayscale

            Gx += pixel * sobel_x[i + 3][j + 3];
            Gy += pixel * sobel_y[i + 3][j + 3];
        }
    }

    s.x = fabs(Gx.x *Gx.x ) ;
    s.y = fabs(Gy.x *Gy.x ) ;
    s.z = fabs(Gx.x *Gy.x) ;
    // if (s.x > 0) printf("%f", s.x);

    write_imagef(dest, coord, s);
}


__kernel void feature_detection22 (
    __read_only image2d_t src,
    __write_only image2d_t dest) {
        int2 coord = (int2)(get_global_id(0), get_global_id(1));
        const float4 in = read_imagef(src, clamp_sampler, coord);
    // printf("3");
    if((coord.x == 1000) && (coord.y==1000)) {printf("3");}

    //SMOOTHING
    float4 s = (float4)(0.0f);
    int i = 0;
    // //Half smoothing smoothing size / 2 (5/2)
    // }
    //  const float4 max = read_imagef(src, clamp_sampler, pos);

    // if (max.x < threshold) {
    //     write_imagef(dest, pos, (float4)0.0f);

    // //filterWeights is gaussianfilter
    float filterWeights[5*5] = 
							{
								 0.0039062f, 0.0156250f, 0.0234375f, 0.0156250f, 0.0039062f,
								 0.0156250f, 0.0625000f, 0.0937500f, 0.0625000f, 0.0156250f,
								 0.0234375f, 0.0937500f, 0.1406250f, 0.0937500f, 0.0234375f,
								 0.0156250f, 0.0625000f, 0.0937500f, 0.0625000f, 0.0156250f,
								 0.0039062f, 0.0156250f, 0.0234375f, 0.0156250f, 0.0039062f
							};
    int half_smoothing = 2;
    for (int y = -half_smoothing; y <= half_smoothing; ++y) {
        for (int x = -half_smoothing; x <= half_smoothing; ++x) {
            float4 cur_pix = read_imagef(src, reflect_sampler, coord + (int2)(x,y));

            s += filterWeights[i] * cur_pix;
            ++i;
        }
    }
    
        float harris_k = 0.05;
        float4 r = (float4)(0);

        // r.x = ((s.x * s.y - s.z * s.z) - harris_k * (s.x + s.y) * (s.x + s.y))/ 7000000000;
        r.x = ((s.x * s.y - s.z * s.z) - harris_k * (s.x + s.y) * (s.x + s.y));
        r.x = log10(fabs(r.x));
        // printf("%f \n", r.x);
        if (r.x < 16) {
            r.x=0;
        }
        else {
            // printf("%f \n", r.x);
        }
        r.y = r.x;
        r.z = r.x;


        write_imagef(dest, coord, r);
    }

__kernel void feature_detection3 (
    __read_only image2d_t src_org,
    __read_only image2d_t src,
    __write_only image2d_t dest) {
        int2 pos = (int2)(get_global_id(0), get_global_id(1));
    float4 minVal = (float4)(1.0f); // Initial high value for min operation
    const uint4 org = read_imageui(src_org, clamp_sampler, pos);
    const float4 in = convert_float4(read_imageui(src, clamp_sampler, pos));

    // printf("4");
    if((pos.x == 1000) && (pos.y==1000)) {printf("4");}

    // // // Iterate over the 5x5 region
    // for (int i = -1; i <= 1; i++) {
    //     for (int j = -1; j <= 1; j++) {
    //         float4 pixel = read_imagef(src, clamp_sampler, coord + (int2)(j, i));
    //         minVal = fmin(minVal, pixel); // Update minimum value
    //     }
    // }
     const float4 max = read_imagef(src, clamp_sampler, pos);

    // if (max.x < threshold) {
    //     write_imagef(dest, pos, (float4)0.0f);
    //     return;
    // }
    int half_supr = 30;

    for (int y = -half_supr; y <= half_supr; y++) {
        for (int x = -half_supr; x <= half_supr; ++x) {
            const float4 r = read_imagef(src, reflect_sampler, pos + (int2)(x,y));
            if (r.x > max.x) {
                write_imagef(dest, pos, convert_float4(org));
                return;
            }
            // else
            // {
            //     write_imagef(dest, pos, convert_float4(org));
            //     // return;
            // }

        }

    }
    float4 d = (255, 0, 0, 0);
    // if (max.x > 0) {
    // printf("ID: ( {%d, %d, %f)", pos.x, pos.y, max.x);
    // }
    write_imagef(dest, pos, d);

    // write_imagef(dest, coord, in);
    }


__kernel void feature_detection4 (
    __read_only image2d_t src,
    __write_only image2d_t dest) {
        // printf("5");
        int2 coord = (int2)(get_global_id(0), get_global_id(1));
        if((coord.x == 1000) && (coord.y==1000)) {printf("5");}
        const float4 in = read_imagef(src, clamp_sampler, coord);
        write_imageui(dest, coord, convert_uint4(in));
    }